package lagern;


/**
* lagern/_LagerStub.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from lager.idl
* Mittwoch, 3. April 2013 16:15 Uhr MESZ
*/

public class _LagerStub extends org.omg.CORBA.portable.ObjectImpl implements lagern.Lager
{


  //holt die aktuelle Fachliste, Rückgabewert soll die Gesamtzahl der Faecher angeben
  public int getFachliste (lagern.TFachlisteHolder fachliste)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getFachliste", true);
                $in = _invoke ($out);
                int $result = $in.read_long ();
                fachliste.value = lagern.TFachlisteHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getFachliste (fachliste        );
            } finally {
                _releaseReply ($in);
            }
  } // getFachliste

  public lagern.Fach neu (String name) throws lagern.LagerPackage.EAlreadyExists
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("neu", true);
                $out.write_string (name);
                $in = _invoke ($out);
                lagern.Fach $result = lagern.FachHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:lagern/Lager/EAlreadyExists:1.0"))
                    throw lagern.LagerPackage.EAlreadyExistsHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return neu (name        );
            } finally {
                _releaseReply ($in);
            }
  } // neu

  public void loeschen (String name) throws lagern.LagerPackage.ENotFound
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("loeschen", true);
                $out.write_string (name);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:lagern/Lager/ENotFound:1.0"))
                    throw lagern.LagerPackage.ENotFoundHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                loeschen (name        );
            } finally {
                _releaseReply ($in);
            }
  } // loeschen

  public lagern.Fach hole (String name) throws lagern.LagerPackage.ENotFound
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("hole", true);
                $out.write_string (name);
                $in = _invoke ($out);
                lagern.Fach $result = lagern.FachHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:lagern/Lager/ENotFound:1.0"))
                    throw lagern.LagerPackage.ENotFoundHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return hole (name        );
            } finally {
                _releaseReply ($in);
            }
  } // hole

  public void monitorHinzufuegen (lagern.Monitor theMonitor)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("monitorHinzufuegen", true);
                lagern.MonitorHelper.write ($out, theMonitor);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                monitorHinzufuegen (theMonitor        );
            } finally {
                _releaseReply ($in);
            }
  } // monitorHinzufuegen

  public void monitorEntfernen (lagern.Monitor theMonitor)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("monitorEntfernen", true);
                lagern.MonitorHelper.write ($out, theMonitor);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                monitorEntfernen (theMonitor        );
            } finally {
                _releaseReply ($in);
            }
  } // monitorEntfernen


  //Dient zum Beenden der Lageranwendung. Sorgt dafuer, dass das Lager und alle registrierten Monitore beendet werden.
  public void exit ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("exit", true);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                exit (        );
            } finally {
                _releaseReply ($in);
            }
  } // exit

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:lagern/Lager:1.0"};

  public String[] _ids ()
  {
    return (String[])__ids.clone ();
  }

  private void readObject (java.io.ObjectInputStream s) throws java.io.IOException
  {
     String str = s.readUTF ();
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     org.omg.CORBA.Object obj = orb.string_to_object (str);
     org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl) obj)._get_delegate ();
     _set_delegate (delegate);
   } finally {
     orb.destroy() ;
   }
  }

  private void writeObject (java.io.ObjectOutputStream s) throws java.io.IOException
  {
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     String str = orb.object_to_string (this);
     s.writeUTF (str);
   } finally {
     orb.destroy() ;
   }
  }
} // class _LagerStub
